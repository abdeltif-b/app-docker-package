version: "3.9"
name: apps
# change ports 5433:5432, 80:3000, http://functions:8000
services:
  db:
    image: postgres:15.3
    # container_name: db
    restart: unless-stopped
    ports:
      - 5432:5432
    env_file: ./env/db.env
    volumes:
      - /data/volumes/postgres:/var/lib/postgresql/data

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    # container_name: keycloak
    restart: unless-stopped
    ports:
      - 8080:8080
    env_file: ./env/keycloak.env
    volumes:
      - /data/volumes/keycloak:/opt/jboss/keycloak/standalone/data
      # - ./keycloak-bg.png:/opt/jboss/keycloak/themes/keycloak/login/resources/img/keycloak-bg.png

      # - C:\develop\certificates\keycloak.codewrecks.com\cert.pem:/etc/x509/https/tls.crt
      # - C:\develop\certificates\keycloak.codewrecks.com\privkey.pem:/etc/x509/https/tls.key
    command: ["start-dev"]

  t3:
    platform: "linux/amd64"
    build:
      # context: ./planiverse-t3
      context: https://github_pat_<KEY>@github.com/abdeltif-b/planiverse-t3.git#madec-staging
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_SYNCFUSION_LICENSE: ORg4AjUWIQA/Gnt2V1hhQlJCfV5AQmBIYVp/TGpJfl96cVxMZVVBJAtUQF1hSn5UdkBjX31acH1UQmVc
        NEXT_PUBLIC_BATCH_FUNCTION: madecDeploiementBatch
        NEXT_PUBLIC_ACCESS_KEY_ID: <KEY_ID>
        NEXT_PUBLIC_SECRET_KEY: <SECRET_KEY>
        NEXT_PUBLIC_DATA_UPLOAD_BUCKET_NAME: madec-staging
        NEXT_PUBLIC_ENVIRONMENT: dev
        # NEXT_PUBLIC_FUNCTION_API_URL: http://15.237.21.246:8001
        # NEXT_PUBLIC_FUNCTION_API_URL: http://functions:8000
        NEXT_PUBLIC_CLIENT: madec
    # working_dir: /app
    ports:
      - 80:3000
    # image: planiverse
    restart: unless-stopped
    env_file: ./env/t3.env
    volumes:
      - /data/uploads/Fichiers importés:/data/uploads/Fichiers importés
    # networks:
    #   - net
    depends_on:
      - db
      - keycloak

  functions:
    build:
      # context: ./planiverse-functions
      context: https://github_pat_<KEY>@github.com/abdeltif-b/planiverse-functions.git#madec
      dockerfile: Dockerfile
    volumes:
      - /data/uploads/Fichiers importés:/data/uploads/Fichiers importés
    ports:
      - 8000:8000
    restart: unless-stopped
    env_file: ./env/functions.env
    # image: planiverse-functions
    # networks:
    #   - net
    depends_on:
      - db
      - t3

  pgbackups:
    image: prodrigestivill/postgres-backup-local
    # container_name: db-backup
    restart: unless-stopped
    # user: postgres:postgres # Optional: see below
    # ports:
    #   - 8002:8080
    env_file: ./env/pgbackups.env
    volumes:
      - /data/volumes/pgbackups:/backups
    # links:
    #   - db
    depends_on:
      - db

  #---------------------------------------
  # grafana / prometheus related services
  #---------------------------------------
  grafana:
    image: grafana/grafana
    # container_name: grafana
    restart: unless-stopped
    ports:
      - 3001:3000
    # run as root user
    user: "0"
    environment:
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=pass
    volumes:
      # automatically configure the loki datasource
      - ./grafana_files/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      # - ./grafana:/etc/grafana/provisioning/datasources
      # directory must be created first, with uid:gid 472:472
      - /data/volumes/grafana:/var/lib/grafana

  loki:
    image: grafana/loki:2.6.1
    # container_name: loki
    ports:
      - 3100:3100
    user: "0"
    volumes:
      # directory must be created first, with uid:gid 10001:10001
      - /data/volumes/loki:/loki

  # https://cylab.be/blog/241/use-loki-to-monitor-the-logs-of-your-docker-compose-application
  promtail:
    image: grafana/promtail:2.6.1
    # container_name: promtail
    restart: unless-stopped
    volumes:
      # custom config will read logs from the containers of this project
      - ./grafana_files/promtail-config.yaml:/etc/promtail/config.yml
      # to read container labels and logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers

  prometheus:
    image: prom/prometheus
    # container_name: prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    user: "0"
    volumes:
      - ./grafana_files/prometheus.yml:/etc/prometheus/prometheus.yml
      - /data/volumes/prometheus:/prometheus

    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    # container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://user:pass@db:5432/db_name?sslmode=disable"
    ports:
      - "9187:9187"

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    # container_name: node-exporter
    restart: unless-stopped
    command:
      - "--path.rootfs=/host"
    # network_mode: host
    # pid: host
    ports:
      - "9100:9100"

    volumes:
      - "/:/host:ro,rslave"

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   volumes:
  #     # :ro or read-only mode
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - "--path.procfs=/host/proc"
  #     - "--path.rootfs=/rootfs"
  #     - "--path.sysfs=/host/sys"
  #     - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
  #   expose:
  #     - 9100
  #   # networks:
  #   #   - monitoring
# networks:
#   default:
#     name: hello_fastapi
# #   net:
# #     driver: bridge

# volumes:
# prometheus-data:
#   driver: local
#   driver_opts:
#     o: bind
#     type: none
#     device: ./prometheus-data
# grafana-data:
#   driver: local
#   driver_opts:
#     o: bind
#     type: none
#     device: ./grafana-data
# prometheus_data:
# postgres-data:

# deploy:
#   resources:
#     limits:
#       memory: "6G"
#       cpus: "10"
